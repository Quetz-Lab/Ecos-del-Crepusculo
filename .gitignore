## Kiro IDE + Visual Studio .gitignore
## Optimized for Kiro IDE development with Visual Studio support
## Includes Kiro-specific files, build artifacts, and development tools

# ==================== KIRO IDE SPECIFIC ====================

# Kiro IDE configuration and cache
.kiro/cache/
.kiro/temp/
.kiro/logs/
.kiro/workspace.cache
.kiro/session.json
.kiro/recent.json
.kiro/index.db
.kiro/search.idx

# Kiro IDE user settings (keep project settings)
.kiro/settings/user/
.kiro/settings/local/
.kiro/settings/machine/

# Kiro IDE build artifacts
.kiro/build/
.kiro/output/
.kiro/dist/

# Kiro IDE debugging
.kiro/debug/
.kiro/breakpoints.json
.kiro/watch.json

# Kiro IDE extensions and plugins
.kiro/extensions/cache/
.kiro/extensions/temp/
.kiro/plugins/cache/

# Kiro IDE AI and analysis
.kiro/ai/cache/
.kiro/analysis/temp/
.kiro/suggestions.cache

# ==================== DEVELOPMENT ARTIFACTS ====================

# Compiled binaries and executables
*.exe
*.dll
*.so
*.dylib
*.a
*.lib

# Debug and profiling files
*.pdb
*.ilk
*.exp
*.map
*.dmp

# Temporary and backup files
*.tmp
*.temp
*.bak
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# Log files
*.log
logs/
debug.log
error.log
crash.log

# ==================== VISUAL STUDIO SUPPORT ====================

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.tlog
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio 6 auto-generated project file (contains which files were open etc.)
*.vbp

# Visual Studio 6 workspace and project file (working project files containing files to include in project)
*.dsw
*.dsp

# Visual Studio 6 technical files
*.ncb
*.aps

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# Visual Studio History (VSHistory) files
.vshistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

# VS Code files for those working on multiple tools
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows Installer files from build outputs
*.cab
*.msi
*.msix
*.msm
*.msp

# JetBrains Rider
*.sln.iml

# ==================== GAME DEVELOPMENT SPECIFIC ====================

# Raylib and game engine artifacts
raylib/
external/raylib/build/
external/*/build/

# Game assets (large files - use Git LFS if needed)
# Uncomment if you want to ignore large assets
# *.wav
# *.mp3
# *.ogg
# *.mp4
# *.avi
# *.mov
# Large textures (keep small ones in repo)
# *_4k.png
# *_8k.png
# *.tga
# *.exr

# Game build outputs
game_build/
release/
dist/
package/

# Game configuration and saves (keep templates)
saves/
config/user/
settings/user/
profiles/

# Performance and profiling
*.prof
*.trace
perf.data*
callgrind.out.*

# ==================== DEVELOPMENT TOOLS ====================

# CMake
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
Makefile
*.cmake
!CMakeLists.txt

# Ninja build system
.ninja_deps
.ninja_log
build.ninja

# Conan package manager
conandata.yml
conanfile.txt.user
conan.lock

# vcpkg
vcpkg_installed/
.vcpkg-root

# ==================== DOCUMENTATION AND SPECS ====================

# Generated documentation
docs/generated/
docs/build/
docs/html/
docs/latex/

# Spec artifacts (keep the specs themselves)
.kiro/specs/*/cache/
.kiro/specs/*/temp/
.kiro/specs/*/build/

# ==================== TESTING AND CI/CD ====================

# Test results and coverage
test_results/
coverage/
*.coverage
*.coveragexml
TestResults/

# CI/CD artifacts
.github/workflows/cache/
.gitlab-ci/cache/
ci_build/
artifacts/

# ==================== SYSTEM AND EDITOR ====================

# Windows system files
desktop.ini
ehthumbs.db
$RECYCLE.BIN/

# macOS system files
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*

# Linux system files
*~
.directory
.Trash-*

# Editor backups and temp files
*.swp
*.swo
*.tmp
*~
.#*
\#*#

# ==================== SECURITY ====================

# API keys and secrets
.env
.env.local
.env.*.local
secrets.json
api_keys.txt
*.key
*.pem
*.p12
*.pfx

# Database files (if any)
*.db
*.sqlite
*.sqlite3

# ==================== CUSTOM PROJECT EXCLUSIONS ====================

# Add your project-specific ignores here
# Example:
# my_custom_tool_output/
# project_specific_cache/
